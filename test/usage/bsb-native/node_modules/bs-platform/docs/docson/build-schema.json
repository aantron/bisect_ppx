{
    "$schema": "http://json-schema.org/draft-04/schema#",
    "definitions": {
        "module-format": {
            "enum": [
                "commonjs",
                "amdjs",
                "amdjs-global",
                "goog",
                "es6",
                "es6-global"
            ],
            "description": "amdjs-global and es6-global generate relative `require` paths instead of relying on NodeJS' module resolution. Default: commonjs."
        },
        "module-format-object": {
            "type": "object",
            "properties": {
                "module": {
                    "$ref": "#/definitions/module-format"
                },
                "in-source": {
                    "type": "boolean",
                    "description": "Default: false."
                }
            },
            "required": [
                "module"
            ]
        },
        "package-spec": {
            "oneOf": [
                {
                    "$ref": "#/definitions/module-format"
                },
                {
                    "$ref": "#/definitions/module-format-object"
                }
            ]
        },
        "package-specs": {
            "oneOf": [
                {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/package-spec"
                    }
                },
                {
                    "$ref": "#/definitions/package-spec"
                }
            ]
        },
        "react-jsx-version": {
            "title": "jsx-version",
            "oneOf": [
                {
                    "type": "boolean",
                    "description": "backward compatible mode, true means on with the default to be version 1 (the default value is subject to change)"
                },
                {
                    "type": "number",
                    "description": "jsx version number, current recommend version number is 2"
                }
            ]
        },
        "ppx-specs": {
            "type": "array",
            "items": {
                "type": "string"
            }
        },
        "bs-dependency": {
            "type": "string",
            "title": "dependency"
        },
        "dependencies": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/bs-dependency"
            }
        },
        "js-post-build": {
            "type": "object",
            "properties": {
                "cmd": {
                    "type": "string"
                }
            }
        },
        "rule-generator": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "command": {
                    "type": "string"
                }
            },
            "description": "The shell command is running in *dev* time, and you generated could should be checked in, the depedency is tracked properly during dev time,example: `{ \"name\" : \"ocamllex\", \"command\" : \"ocamllex.opt $in -o $out\"}`"
        },
        "build-generator": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "edge": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "description": "(WIP) Note that we will add the directory path accordingly"
        },
        "sourceItem": {
            "title": "sourceItem",
            "oneOf": [
                {
                    "type": "object",
                    "properties": {
                        "dir": {
                            "type": "string",
                            "description": "name of the directory"
                        },
                        "ppx-specs": {
                            "$ref": "#/definitions/ppx-specs"
                        },
                        "type": {
                            "enum": [
                                "dev",
                                "lib"
                            ]
                        },
                        "files": {
                            "oneOf": [
                                {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "description": "if files are empty, the build system will populate it automatically. Useful for initial build"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "slow-re": {
                                            "type": "string",
                                            "description": "Regex to glob the patterns, syntax is documented [here](http://caml.inria.fr/pub/docs/manual-ocaml/libref/Str.html), for better incremental build performance, we'd suggest listing files explicitly"
                                        },
                                        "excludes": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            },
                                            "description": "Files to be excluded"
                                        }
                                    },
                                    "required": [
                                        "slow-re"
                                    ]
                                }
                            ]
                        },
                        "generators": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/build-generator"
                            },
                            "description": "(WIP) Files generated in dev time"
                        },
                        "public": {
                            "oneOf": [
                                {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "description": "Selected modules, for example, [Module_a, Module_b] "
                                },
                                {
                                    "enum": [
                                        "all"
                                    ]
                                }
                            ],
                            "description": "Default: export all modules. It is recommended for library developers to hide some files/interfaces"
                        },
                        "resources": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "subdirs": {
                            "$ref": "#/definitions/sources",
                            "description": "More source directories"
                        },
                        "group": {
                            "oneOf": [
                                {
                                    "type": "string",
                                    "description": "A _unique_ name for each directory to refer as an internal dependency later"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "name": {
                                            "type": "string"
                                        },
                                        "hierachy": {
                                            "type": "boolean",
                                            "description": "When true, all subdirs are considered as a whole as dependency"
                                        }
                                    }
                                }
                            ],
                            "description": "Not implemented yet"
                        },
                        "internal-depends": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "description": "internal dependencies, if unspecified, all existing listed source files are considered potential dependencies"
                            }
                        }
                    },
                    "required": [
                        "dir"
                    ]
                },
                {
                    "title": "Single non-nested directory",
                    "type": "string"
                }
            ]
        },
        "sources": {
            "oneOf": [
                {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/sourceItem"
                    },
                    "description": "A list of source items"
                },
                {
                    "$ref": "#/definitions/sourceItem",
                    "description": "A single source item"
                }
            ],
            "description": "Example: `\"src\"` or `[\"src\", \"test\"]` or `[{\"dir\": \"src\", \"subdirs\": [...]}]`"
        },
        "targetItems": {
            "type": "object",
            "properties": {
                "kind": {
                    "enum": [
                        "native",
                        "bytecode",
                        "js"
                    ],
                    "description": "The compiler to use for the target"
                },
                "main": {
                    "type": "string",
                    "description": "Name of the main module used as entry point for this target. 'entry-point' isn't used when this project is built as a dependency."
                }
            }
        },
        "entries": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/targetItems"
            },
            "description": "A list of buildable targets"
        },
        "reason-specs": {
            "type": "object",
            "properties": {
                "react-jsx": {
                    "$ref": "#/definitions/react-jsx-version",
                    "description": "Whether to apply the [Reason-React](https://github.com/reasonml/reason-react)-specific JSX PPX transformation."
                }
            }
        },
        "bsc-flags": {
            "oneOf": [
                {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Default: `[\"-no-alias-deps\", \"-w\", \"-40+6+7+27+32..39+44+45\"]`. [Here](https://github.com/bucklescript/bucklescript/blob/0db762aea73fc9f28ebd08e9eb92f1e072f44c2d/jscomp/bsb/bsb_default.ml#L26) are the meanings of the warning flags"
                },
                {
                    "type": "object",
                    "properties": {
                        "kind": {
                            "enum": [
                                "reset",
                                "prefix",
                                "append"
                            ]
                        },
                        "flags": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "description": "(Not implemented yet)"
                }
            ]
        }
    },
    "title": "BuckleScript build configuration",
    "description": "All paths are required to be in **Unix format** (foo/bar), the build system normalizes them for other platforms internally",
    "type": "object",
    "properties": {
        "version": {
            "type": "string",
            "description": "The semantic version of the OCaml library"
        },
        "name": {
            "type": "string",
            "description": "Package name"
        },
        "namespace" : {
            "type" : "boolean",
            "description": "(WIP)whether use namespace or not, the name of namespace is automatically converted from name"
        },
        "sources": {
            "$ref": "#/definitions/sources",
            "description": "Source code location"
        },
        "bs-dependencies": {
            "$ref": "#/definitions/dependencies",
            "description": "OCaml/Reason dependencies of the library, like in package.json. Currently searches in `node_modules`"
        },
        "bs-dev-dependencies": {
            "$ref": "#/definitions/dependencies",
            "description": "OCaml/Reason dev dependencies of the library, like in package.json. Currently searches in `node_modules`"
        },
        "generators": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/rule-generator"
            },
            "description": "(WIP) Pre defined rules"
        },
        "cut-generators": {
            "type": "boolean",
            "description": "Ignore generators, cut the dependency on generator tools"
        },
        "reason": {
            "$ref": "#/definitions/reason-specs",
            "description": "BuckleScript comes with [Reason](http://reasonml.github.io/) by default. Specific configurations here."
        },
        "bsc-flags": {
            "$ref": "#/definitions/bsc-flags",
            "description": "Flags passed to bsc.exe"
        },
        "ppx-flags": {
            "$ref": "#/definitions/ppx-specs",
            "description": "PPX macros to pass to compiler. The syntax is package_name/binary, for example: `reason/reactjs_jsx_ppx.native`. Currenly searches in `node_modules`"
        },
        "js-post-build": {
            "$ref": "#/definitions/js-post-build",
            "description": "(Experimental) post-processing hook. bsb will invoke `cmd ${file}` whenever a `${file}` is changed"
        },
        "package-specs": {
            "$ref": "#/definitions/package-specs",
            "description": "BuckleScript can currently output to [Commonjs](https://en.wikipedia.org/wiki/CommonJS), [AMD](http://requirejs.org/docs/whyamd.html), [Google module](https://github.com/google/closure-library/wiki/goog.module:-an-ES6-module-like-alternative-to-goog.provide) and [ES6 modules](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import)"
        },
        "ocamllex": {
            "type": "string",
            "description": "Path to [OCamllex](https://realworldocaml.org/v1/en/html/parsing-with-ocamllex-and-menhir.html)"
        },
        "ocamlyacc": {
            "type": "string",
            "description": "TODO path to ocamlyacc, mly"
        },
        "menhir": {
            "type": "string",
            "description": "TODO"
        },
        "entries": {
            "$ref": "#/definitions/entries",
            "description": "(internal) Used by bsb to build to different targets: native (ocamlopt), bytecode (ocamlc) or JS (bsc)"
        },
        "generate-merlin": {
            "type": "boolean",
            "description": "Whether to generate the `.merlin` file for [Merlin](https://github.com/ocaml/merlin). Default: true"
        },
        "use-stdlib": {
            "type": "boolean",
            "description": "(Experimental) whether to use the OCaml standard library. Default: true"
        },
        "bs-external-includes": {
            "type": "array",
            "items": {
                "type": "string"
            },
            "description": "(Not needed usually) external include directories, which will be applied `-I` to all compilation units"
        },
        "refmt": {
            "type": "string",
            "description": "(Not needed usually) alternative path to `refmt` for Reason syntax, for example: `reason/refmt_impl.native`. Default: the `refmt.exe` BuckleScript provides out of the box"
        },
        "refmt-flags": {
            "type": "array",
            "items": {
                "type": "string"
            },
            "description": "(Not needed usually) arguments to pass to `refmt` above. Default: `[\"--print\", \"binary\"]`."
        }
    },
    "additionalProperties": false,
    "required": [
        "name",
        "sources"
    ]
}
