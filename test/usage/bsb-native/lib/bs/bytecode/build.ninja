bs_package_flags = -bs-package-name bsb-native-bisect_ppx
src_root_dir = /Users/kennetpostigo/Projects/bisect_ppx/test/usage/bsb-native
bsc = /Users/kennetpostigo/Projects/bisect_ppx/test/usage/bsb-native/node_modules/bs-platform/bin/bsc.exe
bsb_helper = /Users/kennetpostigo/Projects/bisect_ppx/test/usage/bsb-native/node_modules/bs-platform/bin/bsb_helper.exe
bsc_flags = -nostdlib -I '/Users/kennetpostigo/Projects/bisect_ppx/test/usage/bsb-native/node_modules/bs-platform/lib/ocaml/bytecode' -no-alias-deps -color always
ppx_flags = 
bs_package_includes = 
bs_package_dev_includes = 
refmt = /Users/kennetpostigo/Projects/bisect_ppx/test/usage/bsb-native/node_modules/bs-platform/bin/refmt.exe
reason_react_jsx = 
refmt_flags = --print binary
namespace = 
bs_super_errors_ocamlfind = -passopt -bs-super-errors
bs_super_errors = -bs-super-errors
external_deps_for_linking = 
ocamlc = ocamlc
ocamlopt = ocamlopt
ocamlfind = ocamlfind
ocamlfind_dependencies = -package bisect_ppx
bsb_dir_group = 0
bsc_lib_includes = -I src
rule build_ast_and_module_sets_gen_simple
  command = ${bsc}  ${pp_flags} ${ppx_flags} ${bs_super_errors} ${warnings} ${bsc_flags} -c -o ${out} -bs-syntax-only -bs-simple-binary-ast -bs-binary-ast ${in}
  description = [34mBuilding[39m [2m${out}[22m
build src/source.mlast : build_ast_and_module_sets_gen_simple $src_root_dir/src/source.ml
rule build_deps_bytecode
  command = ${bsb_helper} -g ${bsb_dir_group} -MD-bytecode ${in}
  description = [34mBuilding[39m [2m${out}[22m
build src/source.mlast.d : build_deps_bytecode src/source.mlast
rule build_cmo_cmi_bytecode
  command = ${ocamlfind} ${ocamlc} ${bs_super_errors_ocamlfind} ${bs_package_includes} ${bsc_lib_includes} ${ocamlfind_dependencies} ${bsc_extra_includes} -o ${out} ${warnings} -g -c -intf-suffix .mliast_simple -impl ${in}_simple ${postbuild}
  depfile = ${in}.d
  description = [34mBuilding[39m [2m${out}[22m
build src/source.cmo |  src/source.cmi : build_cmo_cmi_bytecode src/source.mlast
  bs_package_flags = $bs_package_flags  -bs-package-output commonjs:lib/js/src
rule linking_bytecode
  command = ${bsb_helper} -bs-main ${main_module} ${bs_super_errors} ${static_libraries} ${ocamlfind_dependencies} ${external_deps_for_linking} ${in} -link-bytecode ${out}
  description = [34mBuilding[39m [2m${out}[22m
build source.byte : linking_bytecode  src/source.mlast |  src/source.cmi src/source.cmo
  main_module = Source
  static_libraries = 
build build.ninja : phony  ||  src/source.mlast.d
